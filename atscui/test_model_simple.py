import os
import sys
from pathlib import Path
import numpy as np

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from stable_baselines3 import DQN, PPO, A2C, SAC


def quick_test_model(model_path: str, algo_name: str):
    """快速测试模型的基本功能
    
    Args:
        model_path: 模型文件路径
        algo_name: 算法名称
    """
    print(f"\n快速测试 {algo_name} 模型")
    print(f"模型路径: {model_path}")
    
    # 检查模型文件是否存在
    if not Path(model_path).exists():
        print(f"❌ 模型文件不存在: {model_path}")
        return False
    
    try:
        # 加载模型
        if algo_name == "DQN":
            model = DQN.load(model_path)
        elif algo_name == "PPO":
            model = PPO.load(model_path)
        elif algo_name == "A2C":
            model = A2C.load(model_path)
        elif algo_name == "SAC":
            model = SAC.load(model_path)
        else:
            print(f"❌ 不支持的算法: {algo_name}")
            return False
        
        print(f"✅ 模型加载成功")
        print(f"   观测空间: {model.observation_space}")
        print(f"   动作空间: {model.action_space}")
        
        # 获取模型实际的观测维度
        obs_dim = model.observation_space.shape[0]
        print(f"   实际观测维度: {obs_dim}")
        
        # 创建测试观测数据
        obs = np.random.uniform(0, 1, size=(1, obs_dim)).astype(np.float32)
        
        # 测试预测
        action, _states = model.predict(obs, deterministic=True)
        print(f"✅ 模型预测成功")
        print(f"   输入观测维度: {obs.shape}")
        print(f"   输出动作: {action}")
        print(f"   动作类型: {type(action)}")
        
        # 测试多次预测的一致性
        actions = []
        for i in range(3):
            action, _ = model.predict(obs, deterministic=True)
            actions.append(action)
        
        consistent = all(np.array_equal(actions[0], a) for a in actions)
        print(f"✅ 一致性测试: {'通过' if consistent else '失败'}")
        
        return True
        
    except Exception as e:
        print(f"❌ 测试失败: {e}")
        return False


def test_with_predefined_scenarios(model_path: str, algo_name: str):
    """使用预定义场景测试模型
    
    Args:
        model_path: 模型文件路径
        algo_name: 算法名称
    """
    print(f"\n场景测试 {algo_name} 模型")
    
    if not Path(model_path).exists():
        print(f"❌ 模型文件不存在")
        return
    
    try:
        # 加载模型
        if algo_name == "DQN":
            model = DQN.load(model_path)
        elif algo_name == "SAC":
            model = SAC.load(model_path)
        elif algo_name == "PPO":
            model = PPO.load(model_path)
        elif algo_name == "A2C":
            model = A2C.load(model_path)
        else:
            print(f"❌ 暂不支持算法: {algo_name}")
            return
        
        # 获取模型实际的观测维度
        obs_dim = model.observation_space.shape[0]
        print(f"   模型观测维度: {obs_dim}")
        
        # 根据观测维度动态生成场景数据
        if obs_dim == 43:
            # 43维: 4相位 + 1最小绿灯 + 19密度 + 19队列
            scenarios = {
                "低流量场景": np.array([1, 0, 0, 0, 1] + [0.1] * 19 + [0.05] * 19, dtype=np.float32),
                "高流量场景": np.array([0, 1, 0, 0, 1] + [0.8] * 19 + [0.7] * 19, dtype=np.float32),
                "混合场景": np.array([0, 0, 1, 0, 1] + [0.5] * 19 + [0.4] * 19, dtype=np.float32)
            }
        elif obs_dim == 45:
            # 45维: 4相位 + 1最小绿灯 + 20密度 + 20队列 + 2其他
            scenarios = {
                "低流量场景": np.array([1, 0, 0, 0, 1] + [0.1] * 20 + [0.05] * 20 + [0.2, 0], dtype=np.float32),
                "高流量场景": np.array([0, 1, 0, 0, 1] + [0.8] * 20 + [0.7] * 20 + [0.8, 1], dtype=np.float32),
                "混合场景": np.array([0, 0, 1, 0, 1] + [0.5] * 20 + [0.4] * 20 + [0.5, 0], dtype=np.float32)
            }
        else:
            # 其他维度，使用随机数据
            scenarios = {
                "随机场景1": np.random.uniform(0, 1, obs_dim).astype(np.float32),
                "随机场景2": np.random.uniform(0, 1, obs_dim).astype(np.float32),
                "随机场景3": np.random.uniform(0, 1, obs_dim).astype(np.float32)
            }
        
        print("场景测试结果:")
        for name, obs in scenarios.items():
            obs = obs.reshape(1, -1)
            action, _ = model.predict(obs, deterministic=True)
            print(f"  {name}: 动作 = {action}")
        
        print("✅ 场景测试完成")
        
    except Exception as e:
        print(f"❌ 场景测试失败: {e}")


def main():
    """主函数 - 测试所有可用模型"""
    print("=" * 60)
    print("脱离仿真环境的模型测试")
    print("=" * 60)
    
    # 定义要测试的模型
    models = [
        ("/Users/xnpeng/sumoptis/atscui/models/zfdx-model-DQN.zip", "DQN"),
        # ("/Users/xnpeng/sumoptis/atscui/models/zfdx-model-SAC.zip", "SAC"),
        # ("/Users/xnpeng/sumoptis/atscui/models/zfdx-model-PPO.zip", "PPO"),
        # ("/Users/xnpeng/sumoptis/atscui/models/zszx-2-model-SAC.zip", "SAC"),
    ]
    
    success_count = 0
    total_count = len(models)
    
    for model_path, algo_name in models:
        print(f"\n{'='*40}")
        print(f"测试模型: {Path(model_path).name}")
        print(f"算法: {algo_name}")
        print(f"{'='*40}")
        
        # 快速测试
        if quick_test_model(model_path, algo_name):
            success_count += 1
            # 如果快速测试通过，进行场景测试
            test_with_predefined_scenarios(model_path, algo_name)
        
    print(f"\n{'='*60}")
    print(f"测试总结: {success_count}/{total_count} 个模型测试通过")
    print(f"{'='*60}")
    
    if success_count == total_count:
        print("🎉 所有模型都可以脱离仿真环境正常工作！")
    elif success_count > 0:
        print(f"⚠️  部分模型可以脱离仿真环境工作")
    else:
        print("❌ 没有模型能够脱离仿真环境工作")


if __name__ == "__main__":
    main()


"""
脱离仿真环境的模型测试工具
==================================================

========== 真实世界传感器数据处理测试 ==========

--- LIGHT 交通场景 ---
原始传感器数据:
  lane_1: 车辆=0, 停车=0, 速度=12.3m/s, 等待=0.0s
  lane_2: 车辆=0, 停车=0, 速度=12.8m/s, 等待=0.0s
  lane_3: 车辆=2, 停车=0, 速度=14.7m/s, 等待=0.0s
  lane_4: 车辆=0, 停车=0, 速度=13.9m/s, 等待=0.0s
计算结果:
  CCI = 0.003
  控制模式 = sequential
  观测向量维度 = (15,)
  观测向量 = [1.         0.         0.         0.         1.         0.
 0.         0.15       0.         0.         0.         0.
 0.         0.00346029 0.        ]

--- NORMAL 交通场景 ---
原始传感器数据:
  lane_1: 车辆=7, 停车=2, 速度=9.1m/s, 等待=47.5s
  lane_2: 车辆=7, 停车=1, 速度=11.0m/s, 等待=24.4s
  lane_3: 车辆=2, 停车=2, 速度=11.1m/s, 等待=43.9s
  lane_4: 车辆=7, 停车=3, 速度=10.9m/s, 等待=82.8s
计算结果:
  CCI = 0.262
  控制模式 = sequential
  观测向量维度 = (15,)
  观测向量 = [1.         0.         0.         0.         1.         0.525
 0.525      0.15       0.525      0.15       0.075      0.15
 0.225      0.26159438 0.        ]

--- HEAVY 交通场景 ---
原始传感器数据:
  lane_1: 车辆=8, 停车=5, 速度=7.1m/s, 等待=539.7s
  lane_2: 车辆=8, 停车=7, 速度=3.4m/s, 等待=148.0s
  lane_3: 车辆=14, 停车=14, 速度=3.2m/s, 等待=1107.6s
  lane_4: 车辆=7, 停车=5, 速度=3.7m/s, 等待=107.9s
计算结果:
  CCI = 0.945
  控制模式 = flexible
  观测向量维度 = (15,)
  观测向量 = [1.        0.        0.        0.        1.        0.6       0.6
 1.        0.525     0.375     0.525     1.        0.375     0.9445439
 1.       ]

--- EMERGENCY 交通场景 ---
原始传感器数据:
  lane_1: 车辆=11, 停车=7, 速度=3.3m/s, 等待=496.4s
  lane_2: 车辆=13, 停车=0, 速度=1.6m/s, 等待=0.0s
  lane_3: 车辆=18, 停车=1, 速度=3.6m/s, 等待=106.8s
  lane_4: 车辆=16, 停车=4, 速度=2.5m/s, 等待=1043.5s
计算结果:
  CCI = 0.772
  控制模式 = flexible
  观测向量维度 = (15,)
  观测向量 = [1.        0.        0.        0.        1.        0.825     0.975
 1.        1.        0.525     0.        0.075     0.3       0.7724641
 1.       ]

========== 开始脱离仿真环境测试 DQN 模型 ==========
模型路径: /Users/xnpeng/sumoptis/atscui/models/zfdx-model-DQN.zip
==========成功加载DQN模型==========

模型信息:
- 算法: DQN
- 观测空间: Box(0.0, 1.0, (45,), float32)
- 动作空间: Discrete(4)
模型期望观测维度: 45

========== 测试1: 随机观测数据 ==========
随机样本 1:
  观测: [1.         0.         0.         0.         0.         0.796543
 0.18343478 0.779691   0.59685016 0.44583276]... (显示前10维)
  动作: [1]
  动作形状: (1,)
随机样本 2:
  观测: [0.         1.         0.         0.         0.         0.17336465
 0.39106062 0.18223609 0.75536144 0.42515588]... (显示前10维)
  动作: [1]
  动作形状: (1,)
随机样本 3:
  观测: [0.         0.         1.         0.         0.         0.66884124
 0.66592234 0.5912978  0.2747218  0.5612434 ]... (显示前10维)
  动作: [1]
  动作形状: (1,)
随机样本 4:
  观测: [0.         0.         0.         1.         1.         0.35256886
 0.30478126 0.16465585 0.53408945 0.48482996]... (显示前10维)
  动作: [1]
  动作形状: (1,)
随机样本 5:
  观测: [1.         0.         0.         0.         0.         0.8583588
 0.3259589  0.22024105 0.7111495  0.80950105]... (显示前10维)
  动作: [1]
  动作形状: (1,)

========== 测试2: 现实交通场景 ==========
空闲时段 预测失败: Error: Unexpected observation shape (1, 47) for Box environment, please use (45,) or (n_env, 45) for the observation shape.
高峰时段 预测失败: Error: Unexpected observation shape (1, 47) for Box environment, please use (45,) or (n_env, 45) for the observation shape.
不均衡流量 预测失败: Error: Unexpected observation shape (1, 47) for Box environment, please use (45,) or (n_env, 45) for the observation shape.
紧急情况 预测失败: Error: Unexpected observation shape (1, 47) for Box environment, please use (45,) or (n_env, 45) for the observation shape.

========== 测试3: 模型一致性测试 ==========
相同输入的一致性: 通过
5次预测结果: [array([1]), array([1]), array([1]), array([1]), array([1])]

========== 测试4: 边界情况测试 ==========
全零观测 -> 动作: [2]
全一观测 -> 动作: [1]

========== 脱离仿真环境测试完成 ==========

========== 使用真实传感器数据测试 DQN 模型 ==========
==========成功加载DQN模型==========
模型期望观测维度: 45

--- LIGHT 场景下的智能体决策 ---
  生成观测向量维度: (45,)
  场景特征: 车辆=4, 停车=3, 平均速度=13.3m/s
  CCI=0.093, 控制模式=sequential
  智能体决策: [2]
  决策解释: 选择相位 2 (东西直行)

--- NORMAL 场景下的智能体决策 ---
  生成观测向量维度: (45,)
  场景特征: 车辆=26, 停车=14, 平均速度=10.5m/s
  CCI=0.500, 控制模式=flexible
  智能体决策: [1]
  决策解释: 选择相位 1 (南北左转)

--- HEAVY 场景下的智能体决策 ---
  生成观测向量维度: (45,)
  场景特征: 车辆=39, 停车=22, 平均速度=5.9m/s
  CCI=0.885, 控制模式=flexible
  智能体决策: [1]
  决策解释: 选择相位 1 (南北左转)

--- EMERGENCY 场景下的智能体决策 ---
  生成观测向量维度: (45,)
  场景特征: 车辆=49, 停车=32, 平均速度=2.6m/s
  CCI=0.896, 控制模式=flexible
  智能体决策: [1]
  决策解释: 选择相位 1 (南北左转)

========== 开始脱离仿真环境测试 SAC 模型 ==========
模型路径: /Users/xnpeng/sumoptis/atscui/models/zfdx-model-SAC.zip
==========成功加载SAC模型==========

模型信息:
- 算法: SAC
- 观测空间: Box(0.0, 1.0, (43,), float32)
- 动作空间: Box(0.0, 1.0, (4,), float32)
模型期望观测维度: 43

========== 测试1: 随机观测数据 ==========
随机样本 1:
  观测: [1.         0.         0.         0.         0.         0.796543
 0.18343478 0.779691   0.59685016 0.44583276]... (显示前10维)
  动作: [[0.0000000e+00 8.7520301e-01 9.9583298e-01 5.3226948e-05]]
  动作形状: (1, 4)
随机样本 2:
  观测: [0.         1.         0.         0.         1.         0.4401525
 0.12203824 0.4951769  0.03438852 0.9093204 ]... (显示前10维)
  动作: [[2.6613474e-05 1.7728260e-01 9.9923885e-01 8.4638596e-06]]
  动作形状: (1, 4)
随机样本 3:
  观测: [0.         0.         1.         0.         0.         0.9263009
 0.65107703 0.91495967 0.8500386  0.44945067]... (显示前10维)
  动作: [[9.2387199e-07 8.4699094e-03 8.6130834e-01 2.0402670e-04]]
  动作形状: (1, 4)
随机样本 4:
  观测: [0.         0.         0.         1.         1.         0.8036721
 0.18657006 0.892559   0.5393422  0.80744016]... (显示前10维)
  动作: [[4.5597553e-06 4.5540544e-01 9.9883562e-01 7.4505806e-07]]
  动作形状: (1, 4)
随机样本 5:
  观测: [1.         0.         0.         0.         1.         0.5528931
 0.5926967  0.08085333 0.36965445 0.24215993]... (显示前10维)
  动作: [[9.9658966e-05 1.1324883e-06 9.9691141e-01 4.1931868e-05]]
  动作形状: (1, 4)

========== 测试2: 现实交通场景 ==========
空闲时段:
  观测特征: 相位=0, 密度均值=0.098, 队列均值=0.050
  预测动作: [[0.27408874 0.26717055 0.7358477  0.9612899 ]]
高峰时段:
  观测特征: 相位=1, 密度均值=0.805, 队列均值=0.900
  预测动作: [[0.0000000e+00 8.0168247e-05 9.9995756e-01 0.0000000e+00]]
不均衡流量:
  观测特征: 相位=2, 密度均值=0.535, 队列均值=0.411
  预测动作: [[8.3446503e-07 1.6055405e-03 9.9955630e-01 3.5561323e-03]]
紧急情况:
  观测特征: 相位=3, 密度均值=0.952, 队列均值=0.980
  预测动作: [[0.0000000e+00 1.6272068e-05 9.9999607e-01 0.0000000e+00]]

========== 测试3: 模型一致性测试 ==========
相同输入的一致性: 通过
5次预测结果: [array([[0.0000000e+00, 8.7520301e-01, 9.9583298e-01, 5.3226948e-05]],
      dtype=float32), array([[0.0000000e+00, 8.7520301e-01, 9.9583298e-01, 5.3226948e-05]],
      dtype=float32), array([[0.0000000e+00, 8.7520301e-01, 9.9583298e-01, 5.3226948e-05]],
      dtype=float32), array([[0.0000000e+00, 8.7520301e-01, 9.9583298e-01, 5.3226948e-05]],
      dtype=float32), array([[0.0000000e+00, 8.7520301e-01, 9.9583298e-01, 5.3226948e-05]],
      dtype=float32)]

========== 测试4: 边界情况测试 ==========
全零观测 -> 动作: [[0.36117345 0.5741251  0.64772666 0.13084623]]
全一观测 -> 动作: [[0.0000000e+00 2.6822090e-05 9.9998516e-01 0.0000000e+00]]

========== 脱离仿真环境测试完成 ==========

========== 使用真实传感器数据测试 SAC 模型 ==========
==========成功加载SAC模型==========
模型期望观测维度: 43

--- LIGHT 场景下的智能体决策 ---
  生成观测向量维度: (43,)
  场景特征: 车辆=7, 停车=3, 平均速度=13.2m/s
  CCI=0.093, 控制模式=sequential
  智能体决策: [[0.3703373  0.9912003  0.03398517 0.15601319]]
  决策解释: 连续动作值 [[0.3703373  0.9912003  0.03398517 0.15601319]]

--- NORMAL 场景下的智能体决策 ---
  生成观测向量维度: (43,)
  场景特征: 车辆=15, 停车=3, 平均速度=9.4m/s
  CCI=0.186, 控制模式=sequential
  智能体决策: [[0.70110667 0.99976313 0.10997593 0.2864084 ]]
  决策解释: 连续动作值 [[0.70110667 0.99976313 0.10997593 0.2864084 ]]

--- HEAVY 场景下的智能体决策 ---
  生成观测向量维度: (43,)
  场景特征: 车辆=32, 停车=18, 平均速度=4.7m/s
  CCI=0.686, 控制模式=flexible
  智能体决策: [[0.79829323 0.9996144  0.08170334 0.11116791]]
  决策解释: 连续动作值 [[0.79829323 0.9996144  0.08170334 0.11116791]]

--- EMERGENCY 场景下的智能体决策 ---
  生成观测向量维度: (43,)
  场景特征: 车辆=54, 停车=26, 平均速度=3.0m/s
  CCI=0.959, 控制模式=flexible
  智能体决策: [[0.9938624  0.9999738  0.12444934 0.05555084]]
  决策解释: 连续动作值 [[0.9938624  0.9999738  0.12444934 0.05555084]]

========== 开始脱离仿真环境测试 PPO 模型 ==========
模型路径: /Users/xnpeng/sumoptis/atscui/models/zfdx-model-PPO.zip
==========成功加载PPO模型==========

模型信息:
- 算法: PPO
- 观测空间: Box(0.0, 1.0, (43,), float32)
- 动作空间: Discrete(4)
模型期望观测维度: 43

========== 测试1: 随机观测数据 ==========
随机样本 1:
  观测: [1.         0.         0.         0.         0.         0.796543
 0.18343478 0.779691   0.59685016 0.44583276]... (显示前10维)
  动作: [1]
  动作形状: (1,)
随机样本 2:
  观测: [0.         1.         0.         0.         1.         0.4401525
 0.12203824 0.4951769  0.03438852 0.9093204 ]... (显示前10维)
  动作: [2]
  动作形状: (1,)
随机样本 3:
  观测: [0.         0.         1.         0.         0.         0.9263009
 0.65107703 0.91495967 0.8500386  0.44945067]... (显示前10维)
  动作: [1]
  动作形状: (1,)
随机样本 4:
  观测: [0.         0.         0.         1.         1.         0.8036721
 0.18657006 0.892559   0.5393422  0.80744016]... (显示前10维)
  动作: [1]
  动作形状: (1,)
随机样本 5:
  观测: [1.         0.         0.         0.         1.         0.5528931
 0.5926967  0.08085333 0.36965445 0.24215993]... (显示前10维)
  动作: [2]
  动作形状: (1,)

========== 测试2: 现实交通场景 ==========
空闲时段:
  观测特征: 相位=0, 密度均值=0.098, 队列均值=0.050
  预测动作: [2]
高峰时段:
  观测特征: 相位=1, 密度均值=0.805, 队列均值=0.900
  预测动作: [2]
不均衡流量:
  观测特征: 相位=2, 密度均值=0.535, 队列均值=0.411
  预测动作: [1]
紧急情况:
  观测特征: 相位=3, 密度均值=0.952, 队列均值=0.980
  预测动作: [1]

========== 测试3: 模型一致性测试 ==========
相同输入的一致性: 通过
5次预测结果: [array([1]), array([1]), array([1]), array([1]), array([1])]

========== 测试4: 边界情况测试 ==========
全零观测 -> 动作: [1]
全一观测 -> 动作: [1]

========== 脱离仿真环境测试完成 ==========

========== 使用真实传感器数据测试 PPO 模型 ==========
==========成功加载PPO模型==========
模型期望观测维度: 43

--- LIGHT 场景下的智能体决策 ---
  生成观测向量维度: (43,)
  场景特征: 车辆=7, 停车=3, 平均速度=13.2m/s
  CCI=0.093, 控制模式=sequential
  智能体决策: [2]
  决策解释: 选择相位 2 (东西直行)

--- NORMAL 场景下的智能体决策 ---
  生成观测向量维度: (43,)
  场景特征: 车辆=15, 停车=3, 平均速度=9.4m/s
  CCI=0.186, 控制模式=sequential
  智能体决策: [2]
  决策解释: 选择相位 2 (东西直行)

--- HEAVY 场景下的智能体决策 ---
  生成观测向量维度: (43,)
  场景特征: 车辆=32, 停车=18, 平均速度=4.7m/s
  CCI=0.686, 控制模式=flexible
  智能体决策: [2]
  决策解释: 选择相位 2 (东西直行)

--- EMERGENCY 场景下的智能体决策 ---
  生成观测向量维度: (43,)
  场景特征: 车辆=54, 停车=26, 平均速度=3.0m/s
  CCI=0.959, 控制模式=flexible
  智能体决策: [2]
  决策解释: 选择相位 2 (东西直行)

========== 开始脱离仿真环境测试 SAC 模型 ==========
模型路径: /Users/xnpeng/sumoptis/atscui/models/zszx-2-model-SAC.zip
==========成功加载SAC模型==========

模型信息:
- 算法: SAC
- 观测空间: Box(0.0, 1.0, (43,), float32)
- 动作空间: Box(0.0, 1.0, (4,), float32)
模型期望观测维度: 43

========== 测试1: 随机观测数据 ==========
随机样本 1:
  观测: [1.         0.         0.         0.         0.         0.796543
 0.18343478 0.779691   0.59685016 0.44583276]... (显示前10维)
  动作: [[0.97595084 0.95171356 0.28395265 0.03671846]]
  动作形状: (1, 4)
随机样本 2:
  观测: [0.         1.         0.         0.         1.         0.4401525
 0.12203824 0.4951769  0.03438852 0.9093204 ]... (显示前10维)
  动作: [[0.79255927 1.         0.02621573 0.9792733 ]]
  动作形状: (1, 4)
随机样本 3:
  观测: [0.         0.         1.         0.         0.         0.9263009
 0.65107703 0.91495967 0.8500386  0.44945067]... (显示前10维)
  动作: [[0.97595084 0.95171356 0.28395265 0.03671846]]
  动作形状: (1, 4)
随机样本 4:
  观测: [0.         0.         0.         1.         1.         0.8036721
 0.18657006 0.892559   0.5393422  0.80744016]... (显示前10维)
  动作: [[0.99359405 0.4861102  0.8355695  0.02478284]]
  动作形状: (1, 4)
随机样本 5:
  观测: [1.         0.         0.         0.         1.         0.5528931
 0.5926967  0.08085333 0.36965445 0.24215993]... (显示前10维)
  动作: [[0.97595084 0.95171356 0.28395265 0.03671846]]
  动作形状: (1, 4)

========== 测试2: 现实交通场景 ==========
空闲时段:
  观测特征: 相位=0, 密度均值=0.098, 队列均值=0.050
  预测动作: [[0.18624744 0.9930722  0.8619338  0.24742943]]
高峰时段:
  观测特征: 相位=1, 密度均值=0.805, 队列均值=0.900
  预测动作: [[0.84841454 0.995088   0.01023903 0.02570415]]
不均衡流量:
  观测特征: 相位=2, 密度均值=0.535, 队列均值=0.411
  预测动作: [[0.97595084 0.95171356 0.28395265 0.03671846]]
紧急情况:
  观测特征: 相位=3, 密度均值=0.952, 队列均值=0.980
  预测动作: [[0.98791593 0.80136085 0.60046786 0.02991974]]

========== 测试3: 模型一致性测试 ==========
相同输入的一致性: 通过
5次预测结果: [array([[0.97595084, 0.95171356, 0.28395265, 0.03671846]], dtype=float32), array([[0.97595084, 0.95171356, 0.28395265, 0.03671846]], dtype=float32), array([[0.97595084, 0.95171356, 0.28395265, 0.03671846]], dtype=float32), array([[0.97595084, 0.95171356, 0.28395265, 0.03671846]], dtype=float32), array([[0.97595084, 0.95171356, 0.28395265, 0.03671846]], dtype=float32)]

========== 测试4: 边界情况测试 ==========
全零观测 -> 动作: [[0. 1. 0. 0.]]
全一观测 -> 动作: [[1. 1. 1. 0.]]

========== 脱离仿真环境测试完成 ==========

========== 使用真实传感器数据测试 SAC 模型 ==========
==========成功加载SAC模型==========
模型期望观测维度: 43

--- LIGHT 场景下的智能体决策 ---
  生成观测向量维度: (43,)
  场景特征: 车辆=7, 停车=3, 平均速度=13.2m/s
  CCI=0.093, 控制模式=sequential
  智能体决策: [[0.8403578 0.9629369 0.7431631 0.8036573]]
  决策解释: 连续动作值 [[0.8403578 0.9629369 0.7431631 0.8036573]]

--- NORMAL 场景下的智能体决策 ---
  生成观测向量维度: (43,)
  场景特征: 车辆=15, 停车=3, 平均速度=9.4m/s
  CCI=0.186, 控制模式=sequential
  智能体决策: [[0.9988651  0.9307905  0.03570932 0.86770236]]
  决策解释: 连续动作值 [[0.9988651  0.9307905  0.03570932 0.86770236]]

--- HEAVY 场景下的智能体决策 ---
  生成观测向量维度: (43,)
  场景特征: 车辆=32, 停车=18, 平均速度=4.7m/s
  CCI=0.686, 控制模式=flexible
  智能体决策: [[0.97073174 0.90506184 0.6481776  0.9473316 ]]
  决策解释: 连续动作值 [[0.97073174 0.90506184 0.6481776  0.9473316 ]]

--- EMERGENCY 场景下的智能体决策 ---
  生成观测向量维度: (43,)
  场景特征: 车辆=54, 停车=26, 平均速度=3.0m/s
  CCI=0.959, 控制模式=flexible
  智能体决策: [[0.9944444  0.7919147  0.54923594 0.9858731 ]]
  决策解释: 连续动作值 [[0.9944444  0.7919147  0.54923594 0.9858731 ]]

========== 所有测试完成 ==========

总结:
1. 真实传感器数据处理算法已实现，包括:
   - 从雷视机等检测设备获取原始数据
   - 计算综合拥堵指数(CCI)
   - 确定控制模式(sequential/flexible)
   - 生成智能体观测向量
2. 模型可以脱离SUMO仿真环境，直接使用真实传感器数据进行决策
3. 支持多种交通场景的测试和验证
"""